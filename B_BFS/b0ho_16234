import java.util.*;

public class Main {

    static int N;
    static int L;
    static int R;
    static int[][] arr;
    static boolean[][] visit;
    static ArrayList<Point> list;
    static int[][] drx;
    static int sum;
    static int answer;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        N = sc.nextInt();
        L = sc.nextInt();
        R = sc.nextInt();
        arr = new int[N][N];
        drx = new int[][]{{-1, 0}, {1, 0}, {0, 1}, {0, -1}};

        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                arr[i][j] = sc.nextInt();
            }
        }

        // 인구이동이 있었을 때만 다시 반복
        boolean flag = true;
        while (flag) {
            flag = false;
            visit = new boolean[N][N];
            answer++;

            // 모든 맵을 돌면서
            for (int i = 0; i < N; i++) {
                for (int j = 0; j < N; j++) {
                    // 방문하지 않은 곳만 탐색하여 2개이상 나눠진 영토를 구분할 수 있다
                    if (!visit[i][j]) {
                        list = new ArrayList<>();
                        list.add(new Point(i, j));
                        // 시작점을 가지고 간다
                        sum = arr[i][j];
                        bfs(i, j);

                        // 리스트가 2이상이라는 것은
                        // 인구이동이 가능하다는 뜻
                        if (list.size() > 1) {
                            flag = true;
                            // 인구이동이 가능한 지역을 모두 평균으로 맞춘다
                            for (int k = 0; k < list.size(); k++) {
                                Point tmp = list.get(k);
                                arr[tmp.a][tmp.b] = sum / list.size();
                            }
                        }

                    }
                }
            }
        }

        System.out.println(answer - 1);

    }

    public static void bfs(int a, int b) {
        Queue<Point> q = new LinkedList<>();
        q.add(new Point(a, b));
        visit[a][b] = true;

        while (!q.isEmpty()) {
            Point p = q.poll();
            int x = p.a;
            int y = p.b;

            for (int[] d : drx) {
                int nx = x + d[0];
                int ny = y + d[1];

                if (nx >= 0 && ny >= 0 && nx < N && ny < N) {
                    if (!visit[nx][ny]) {
                        // 인구이동이 가능한 경우를 모두 찾는다
                        int pos = Math.abs(arr[nx][ny] - arr[x][y]);
                        if (pos >= L && pos <= R) {
                            // 다음 가능함을 찾기 위해 큐에 넣고
                            q.add(new Point(nx, ny));
                            // 큐에 넣은 것은 또한 나중에 평균을 내기 위해 기억해야한다
                            // 큐는 사라지므로 별도의 리스트에 넣는다
                            list.add(new Point(nx, ny));
                            sum += arr[nx][ny];
                            visit[nx][ny] = true;
                        }
                    }
                }
            }
        }
    }

    public static class Point {
        int a;
        int b;

        public Point(int a, int b) {
            this.a = a;
            this.b = b;
        }
    }

}
